using System;
using System.IO;
using System.IO.Compression;
using System.Linq;

public class NetUtils : Singleton<NetUtils> {
    /// <summary>
    /// 将发送数据进行封装
    /// </summary>
    /// <param name="data">需要发送到客户端的数据</param>
    /// <returns>封装后的数据</returns>
    public byte[] CreateData(byte[] data) {
        // 消息体长度大于200则需要压缩
        bool isCom = data.Length > 200;
        if (isCom) {
            data = Compress(data);
        }

        // 是否压缩
        byte[] isComBytes = BitConverter.GetBytes(isCom);

        // CRC校验
        ushort crc = CRC16(data);
        byte[] crcBytes = BitConverter.GetBytes(crc);

        // 连接成消息体
        byte[] buffer = isComBytes.Concat(crcBytes).Concat(data).ToArray();
        // 计算消息头长度
        byte[] head = BitConverter.GetBytes((ushort)buffer.Length);
        // 消息包：需要发送的完整的数据
        byte[] sendData = head.Concat(buffer).ToArray();

        return sendData;
    }

    /// <summary>
    /// 解析接收到的消息
    /// </summary>
    /// <param name="buffer">接收的消息</param>
    /// <param name="msgLen">消息体长度</param>
    /// <returns>解析后的数据 or null</returns>
    public byte[] ParseData(byte[] buffer, int msgLen) {
        bool isCom = BitConverter.ToBoolean(buffer, 2); // 占1字节
        ushort crc = BitConverter.ToUInt16(buffer, 3); // 占2字节
        byte[] data = new byte[msgLen - 1 - 2];
        Buffer.BlockCopy(buffer, 5, data, 0, data.Length);
        // CRC验证
        ushort newCrc = CRC16(data);
        if (crc == newCrc) {
            if (isCom) {
                data = Decompress(data);
            }
            return data;
        }

        return null;
    }

    #region 压缩和解压数据

    /// <summary>
    /// 压缩数据
    /// </summary>
    /// <param name="data">需要压缩的数据</param>
    /// <returns>压缩后的数据</returns>
    public byte[] Compress(byte[] data) {
        using (var comStream = new MemoryStream()) {
            using (var zipStream = new GZipStream(comStream, CompressionMode.Compress)) {
                zipStream.Write(data, 0, data.Length);
                zipStream.Close();
                return comStream.ToArray();
            }
        }
    }

    /// <summary>
    /// 解压数据
    /// </summary>
    /// <param name="data">需要解压的数据</param>
    /// <returns>解压后的数据</returns>
    public byte[] Decompress(byte[] data) {
        using (var comStream = new MemoryStream(data)) {
            using (var zipStream = new GZipStream(comStream, CompressionMode.Decompress)) {
                using (var resultStream = new MemoryStream()) {
                    zipStream.CopyTo(resultStream);
                    zipStream.Close();
                    return resultStream.ToArray();
                }
            }
        }
    }

    #endregion

    #region CRC校验

    /// <summary>
    /// CRC校验
    /// </summary>
    /// <param name="data">需要校验的数据</param>
    public ushort CRC16(byte[] data) {
        byte crcHigh = 0xFF; // 重置CRC高位校验码
        byte crcLow = 0xFF; // 重置CRC低位校验码
        for (int i = 0; i < data.Length; i++) {
            int crcIndex = crcHigh ^ data[i];
            crcHigh = (byte)(crcLow ^ Crc16HighTable[crcIndex]);
            crcLow = Crc16LowTable[crcIndex];
        }

        return (ushort)(crcHigh << 8 | crcLow);
    }

    // 高低位表
    private static readonly byte[] Crc16HighTable = {
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    };

    private static readonly byte[] Crc16LowTable = {
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
        0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
        0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
        0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
        0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
        0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
        0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
        0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
        0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
        0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
        0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
        0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
        0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
        0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
        0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
        0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
        0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
        0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    };

    #endregion
}